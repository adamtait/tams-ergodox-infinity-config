linux-gnu/Linux is supported.
Unix Build
Selected Generator: Ninja
/tmp/tmp.XWpCCgm3MD/left
VID: 0x308F (Boot: 0x1C11)
PID: 0x0004 (Boot: 0xB007)
-- Build CPU Detected:
x86_64
-- Build Kernel Detected:
Linux 5.4.10-x86_64-linode132
-- Compiler Family:
arm
-- Compiler Selected:
gcc
-- Chip Selected:
mk20dx256vlh7
-- Chip Family:
mk2x
-- CPU Selected:
cortex-m4
-- Compiler Source Files:
Lib/kinetis.c;Lib/delay.c;Lib/entropy.c;Lib/gpio.c;Lib/periodic.c;Lib/storage.c;Lib/time.c;Lib/utf8.c;Lib/arm_cortex.c
-- Bootloader Type:
dfu
-- The C compiler identification is GNU 7.3.1
-- Check for working C compiler: /usr/bin/arm-none-eabi-gcc
-- Check for working C compiler: /usr/bin/arm-none-eabi-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Full Compiler:
/usr/bin/arm-none-eabi-gcc 7.3.1
-- Detected Scan Module Source Files:
Scan/Devices/ISSILed/i2c.c;Scan/Devices/ISSILed/led_scan.c;Scan/Devices/MatrixARMPeriodic/matrix_scan.c;Scan/Devices/STLcd/lcd_scan.c;Scan/Devices/UARTConnect/connect_scan.c;Scan/Infinity_Ergodox/scan_loop.c
-- Detected Macro Module Source Files:
Macro/PartialMap/kll.c;Macro/PartialMap/layer.c;Macro/PartialMap/macro.c;Macro/PartialMap/result.c;Macro/PartialMap/trigger.c;Macro/PixelMap/pixel.c;/tmp/tmp.XWpCCgm3MD/left/generatedPixelmap.c
-- Detected Output Module Source Files:
Output/HID-IO/hidio_com.c;Output/Interface/output_gen.c;Output/USB/output_com.c;Output/USB/output_usb.c;Output/USB/arm/usb_desc.c;Output/USB/arm/usb_dev.c;Output/USB/arm/usb_keyboard.c;Output/USB/arm/usb_mem.c;Output/USB/arm/usb_mouse.c;Output/USB/arm/usb_rawio.c
-- Detected Debug Module Source Files:
Debug/cli/cli.c;Debug/latency/latency.c;Debug/led/led.c;Debug/print/print.c
-- Found Git: /usr/bin/git (found version "2.20.1") 
-- Found LSB_RELEASE: /usr/bin/lsb_release  
-- Build OS Detected:
Ubuntu 19.10 eoan
-- Found Ctags: /usr/bin/ctags-exuberant (found version "5.9~svn20110310") 
-- Found PythonInterp: python3 (found suitable version "3.7.5", minimum required is "3") 
-- Checking for kll
-- GITHUB_APIKEY was set.
-- kll Version Detected: kll 0.5.7.16
-- kll Installation Path: /root/.local/share/virtualenvs/Keyboards-41-guJFC/lib/python3.7/site-packages/kll
-- kll Layouts Cache Path: /tmp/10-hid-io-layouts-76840e4
-- Detected Layout Files:
/controller/Scan/Devices/ISSILed/capabilities.kll
/controller/Scan/Devices/MatrixARMPeriodic/capabilities.kll
/controller/Scan/Devices/STLcd/capabilities.kll
/controller/Scan/Devices/UARTConnect/capabilities.kll
/controller/Macro/PartialMap/capabilities.kll
/controller/Macro/PixelMap/capabilities.kll
/controller/Output/HID-IO/capabilities.kll
/controller/Output/USB/capabilities.kll
/controller/Debug/latency/capabilities.kll
/controller/Debug/led/capabilities.kll
/controller/Lib/arm_cortex.kll
/controller/Lib/kinetis.kll
/controller/Scan/Infinity_Ergodox/scancode_map.kll
/controller/Scan/Infinity_Ergodox/leftHand.kll
/controller/Scan/Infinity_Ergodox/slave1.kll
/controller/Scan/Infinity_Ergodox/rightHand.kll
/root/.local/share/virtualenvs/Keyboards-41-guJFC/lib/python3.7/site-packages/kll/layouts/infinity_ergodox/lcdFuncMap.kll
/tmp/tmp.XWpCCgm3MD/left/MDErgo1-Default-0.kll
/tmp/tmp.XWpCCgm3MD/left/MDErgo1-Default-1.kll
/tmp/tmp.XWpCCgm3MD/left/MDErgo1-Default-2.kll
-- Found DFU_SUFFIX: /usr/bin/dfu-suffix (found version "0.9") 
-- Found OBJDUMP: /usr/bin/arm-none-eabi-objdump  
-- Configuring done
-- Generating done
CMake Warning (dev):
  Policy CMP0058 is not set: Ninja requires custom command byproducts to be
  explicit.  Run "cmake --help-policy CMP0058" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  This project specifies custom command DEPENDS on files in the build tree
  that are not specified as the OUTPUT or BYPRODUCTS of any
  add_custom_command or add_custom_target:

   MDErgo1-Default-0.kll
   MDErgo1-Default-1.kll
   MDErgo1-Default-2.kll

  For compatibility with versions of CMake that did not have the BYPRODUCTS
  option, CMake is generating phony rules for such files to convince 'ninja'
  to build.

  Project authors should add the missing BYPRODUCTS or OUTPUT options to the
  custom commands that produce these files.
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Build files have been written to: /tmp/tmp.XWpCCgm3MD/left
[1/41] Generating KLL Layout
ERROR: /tmp/tmp.XWpCCgm3MD/left/MDErgo1-Default-0.kll
      Contains possibly incompatible KLL expressions from 0.3.c
      Please your configuration to KLL 0.5.7.11 compliant code
 === 0.5.6.0 === 
KLL now supports fade profile groups.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Each fade profile may be given 4 fade periods:
 0: Off to On
 1: On
 2: On to Off
 3: Off
There are 16 configurable periods in which start and end times may be set from 0 to 15.
Setting start and end to 0, disables that period (no time is spent waiting/interpolating).
Setting 1 waits for 1 frame, 2 -> 2 frames, 3 -> 4 frames, 4 -> 8 frames
The equations are:
 .start == (1 << start) - 1
 .end   == (1 << end)
Setting .start to a non-zero value will begin the interpolation starting at that frame brightness.

Fade profiles can be set dynamically using fade_set() capability.
 U"A" : fade_set(0, 2, 13); # On profile 0 (keys), set On to Off period to configuration 13
The active layer fade can be started using the fade_layer_highlight() capability.
 Layer[1] : fade_layer_highlight(1);

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/2d7152e0576281abd2f4b1d094a5d778d9811aff/Macro/PixelMap/capabilities.kll

 === 0.5.7.0 === 
KLL now supports the single animation option.
For example:
A[my_animation] <= pfunc:interp, single;
U"Q" : A[my_other_animation](single, pos:20); # Start animation at frame 20 and pause

The single option starts an animation at the specified frame and pauses immediately after.
This is useful when creating a list of colors to cycle through using a rotation.


KLL now supports a basic gamma correction table.
Gamma correction can be dynamically enabled using the gamma() function.
U"A" : gamma(2); # Toggles gamma correction
The gamma correction table is generated at compile time and can be configured using:
LEDGamma = 2.2; # Default gamma correction

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/bce0073e5c31ce89ecc4122d5c1438a027809393/Macro/PixelMap/capabilities.kll

 === 0.5.7.6 === 
KLL now supports the replace:clearactive animation option.
For example:
A[my_animation] <= pfunc:interp, replace:clearactive, single;
U"Q" : A[my_other_animation](replace:clearactive);

The main use for clearactive is to clear any non-paused animations from the animation stack.
While leaving any animations that are currently paused still on the stack.
This means it's possible to save those animations to non-volatile memory (if your keyboard supports it).
If you use replace:clear (as was the default before), when you save the current settings on your keyboard
the keyboard won't understand the sequence of events in order to display the current LED colors.

 === 0.5.7.8 === 
KLL now supports fade profile brightness settings.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Fade profiles are used to apply a configurable dimming and brightening, on top of whatever animation may be set.
0.5.7.8 adds support for the fade_control() which (among other things), can adjust brightness per-fade profile.
The most useful application of this would be to dim the LEDs under keys, while leaving underglow and indicator LEDs on.

U"B" : fade_control(0, 3, 20); # Increment brightness on fade profile 0 (keys) by 20
U"C" : fade_control(1, 4, 10); # Decrement brightness on fade profile 1 (underglow) by 10
KLL_LED_FadeBrightness[2] = 150; # Set default brightness of indicators to 150

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/ae7bf0b711dfba5e77451cd2f269032f929a8657/Macro/PixelMap/capabilities.kll#L89

 === 0.5.7.11 === 
KLL now supports inverting the Layer Fade profile.
This means when a layer is active, only the keys in that layer will show the active animation.
It is used by default on Gemini Dusk and Dawn.

To use, add the following to your KLL file:
KLL_LED_FadeActiveLayerInvert = 1;
KLL_LED_FadeBrightness[0] = 255;
KLL_LED_FadeBrightness[1] = 255;
KLL_LED_FadeBrightness[2] = 255;
KLL_LED_FadeBrightness[3] = 0; # Sets unused LEDs to off
Layer[1] : fade_layer_highlight(1); # Activates layer fade when layer is triggered
Layer[2] : fade_layer_highlight(2); # Activates layer fade when layer is triggered

ERROR: /tmp/tmp.XWpCCgm3MD/left/MDErgo1-Default-1.kll
      Contains possibly incompatible KLL expressions from 0.3.c
      Please your configuration to KLL 0.5.7.11 compliant code
 === 0.5.6.0 === 
KLL now supports fade profile groups.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Each fade profile may be given 4 fade periods:
 0: Off to On
 1: On
 2: On to Off
 3: Off
There are 16 configurable periods in which start and end times may be set from 0 to 15.
Setting start and end to 0, disables that period (no time is spent waiting/interpolating).
Setting 1 waits for 1 frame, 2 -> 2 frames, 3 -> 4 frames, 4 -> 8 frames
The equations are:
 .start == (1 << start) - 1
 .end   == (1 << end)
Setting .start to a non-zero value will begin the interpolation starting at that frame brightness.

Fade profiles can be set dynamically using fade_set() capability.
 U"A" : fade_set(0, 2, 13); # On profile 0 (keys), set On to Off period to configuration 13
The active layer fade can be started using the fade_layer_highlight() capability.
 Layer[1] : fade_layer_highlight(1);

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/2d7152e0576281abd2f4b1d094a5d778d9811aff/Macro/PixelMap/capabilities.kll

 === 0.5.7.0 === 
KLL now supports the single animation option.
For example:
A[my_animation] <= pfunc:interp, single;
U"Q" : A[my_other_animation](single, pos:20); # Start animation at frame 20 and pause

The single option starts an animation at the specified frame and pauses immediately after.
This is useful when creating a list of colors to cycle through using a rotation.


KLL now supports a basic gamma correction table.
Gamma correction can be dynamically enabled using the gamma() function.
U"A" : gamma(2); # Toggles gamma correction
The gamma correction table is generated at compile time and can be configured using:
LEDGamma = 2.2; # Default gamma correction

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/bce0073e5c31ce89ecc4122d5c1438a027809393/Macro/PixelMap/capabilities.kll

 === 0.5.7.6 === 
KLL now supports the replace:clearactive animation option.
For example:
A[my_animation] <= pfunc:interp, replace:clearactive, single;
U"Q" : A[my_other_animation](replace:clearactive);

The main use for clearactive is to clear any non-paused animations from the animation stack.
While leaving any animations that are currently paused still on the stack.
This means it's possible to save those animations to non-volatile memory (if your keyboard supports it).
If you use replace:clear (as was the default before), when you save the current settings on your keyboard
the keyboard won't understand the sequence of events in order to display the current LED colors.

 === 0.5.7.8 === 
KLL now supports fade profile brightness settings.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Fade profiles are used to apply a configurable dimming and brightening, on top of whatever animation may be set.
0.5.7.8 adds support for the fade_control() which (among other things), can adjust brightness per-fade profile.
The most useful application of this would be to dim the LEDs under keys, while leaving underglow and indicator LEDs on.

U"B" : fade_control(0, 3, 20); # Increment brightness on fade profile 0 (keys) by 20
U"C" : fade_control(1, 4, 10); # Decrement brightness on fade profile 1 (underglow) by 10
KLL_LED_FadeBrightness[2] = 150; # Set default brightness of indicators to 150

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/ae7bf0b711dfba5e77451cd2f269032f929a8657/Macro/PixelMap/capabilities.kll#L89

 === 0.5.7.11 === 
KLL now supports inverting the Layer Fade profile.
This means when a layer is active, only the keys in that layer will show the active animation.
It is used by default on Gemini Dusk and Dawn.

To use, add the following to your KLL file:
KLL_LED_FadeActiveLayerInvert = 1;
KLL_LED_FadeBrightness[0] = 255;
KLL_LED_FadeBrightness[1] = 255;
KLL_LED_FadeBrightness[2] = 255;
KLL_LED_FadeBrightness[3] = 0; # Sets unused LEDs to off
Layer[1] : fade_layer_highlight(1); # Activates layer fade when layer is triggered
Layer[2] : fade_layer_highlight(2); # Activates layer fade when layer is triggered

ERROR: /tmp/tmp.XWpCCgm3MD/left/MDErgo1-Default-2.kll
      Contains possibly incompatible KLL expressions from 0.3.c
      Please your configuration to KLL 0.5.7.11 compliant code
 === 0.5.6.0 === 
KLL now supports fade profile groups.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Each fade profile may be given 4 fade periods:
 0: Off to On
 1: On
 2: On to Off
 3: Off
There are 16 configurable periods in which start and end times may be set from 0 to 15.
Setting start and end to 0, disables that period (no time is spent waiting/interpolating).
Setting 1 waits for 1 frame, 2 -> 2 frames, 3 -> 4 frames, 4 -> 8 frames
The equations are:
 .start == (1 << start) - 1
 .end   == (1 << end)
Setting .start to a non-zero value will begin the interpolation starting at that frame brightness.

Fade profiles can be set dynamically using fade_set() capability.
 U"A" : fade_set(0, 2, 13); # On profile 0 (keys), set On to Off period to configuration 13
The active layer fade can be started using the fade_layer_highlight() capability.
 Layer[1] : fade_layer_highlight(1);

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/2d7152e0576281abd2f4b1d094a5d778d9811aff/Macro/PixelMap/capabilities.kll

 === 0.5.7.0 === 
KLL now supports the single animation option.
For example:
A[my_animation] <= pfunc:interp, single;
U"Q" : A[my_other_animation](single, pos:20); # Start animation at frame 20 and pause

The single option starts an animation at the specified frame and pauses immediately after.
This is useful when creating a list of colors to cycle through using a rotation.


KLL now supports a basic gamma correction table.
Gamma correction can be dynamically enabled using the gamma() function.
U"A" : gamma(2); # Toggles gamma correction
The gamma correction table is generated at compile time and can be configured using:
LEDGamma = 2.2; # Default gamma correction

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/bce0073e5c31ce89ecc4122d5c1438a027809393/Macro/PixelMap/capabilities.kll

 === 0.5.7.6 === 
KLL now supports the replace:clearactive animation option.
For example:
A[my_animation] <= pfunc:interp, replace:clearactive, single;
U"Q" : A[my_other_animation](replace:clearactive);

The main use for clearactive is to clear any non-paused animations from the animation stack.
While leaving any animations that are currently paused still on the stack.
This means it's possible to save those animations to non-volatile memory (if your keyboard supports it).
If you use replace:clear (as was the default before), when you save the current settings on your keyboard
the keyboard won't understand the sequence of events in order to display the current LED colors.

 === 0.5.7.8 === 
KLL now supports fade profile brightness settings.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Fade profiles are used to apply a configurable dimming and brightening, on top of whatever animation may be set.
0.5.7.8 adds support for the fade_control() which (among other things), can adjust brightness per-fade profile.
The most useful application of this would be to dim the LEDs under keys, while leaving underglow and indicator LEDs on.

U"B" : fade_control(0, 3, 20); # Increment brightness on fade profile 0 (keys) by 20
U"C" : fade_control(1, 4, 10); # Decrement brightness on fade profile 1 (underglow) by 10
KLL_LED_FadeBrightness[2] = 150; # Set default brightness of indicators to 150

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/ae7bf0b711dfba5e77451cd2f269032f929a8657/Macro/PixelMap/capabilities.kll#L89

 === 0.5.7.11 === 
KLL now supports inverting the Layer Fade profile.
This means when a layer is active, only the keys in that layer will show the active animation.
It is used by default on Gemini Dusk and Dawn.

To use, add the following to your KLL file:
KLL_LED_FadeActiveLayerInvert = 1;
KLL_LED_FadeBrightness[0] = 255;
KLL_LED_FadeBrightness[1] = 255;
KLL_LED_FadeBrightness[2] = 255;
KLL_LED_FadeBrightness[3] = 0; # Sets unused LEDs to off
Layer[1] : fade_layer_highlight(1); # Activates layer fade when layer is triggered
Layer[2] : fade_layer_highlight(2); # Activates layer fade when layer is triggered

-- Generating --
/tmp/tmp.XWpCCgm3MD/left/kll_defs.h
/tmp/tmp.XWpCCgm3MD/left/generatedKeymap.h
/tmp/tmp.XWpCCgm3MD/left/usb_hid.h
/tmp/tmp.XWpCCgm3MD/left/generatedPixelmap.c
/tmp/tmp.XWpCCgm3MD/left/kll.json
[2/41] Building C object CMakeFiles/kiibohd.dir/Lib/periodic.c.obj
[3/41] Building C object CMakeFiles/kiibohd.dir/Lib/gpio.c.obj
[4/41] Building C object CMakeFiles/kiibohd.dir/Lib/storage.c.obj
[5/41] Building C object CMakeFiles/kiibohd.dir/Lib/delay.c.obj
[6/41] Building C object CMakeFiles/kiibohd.dir/Lib/entropy.c.obj
[7/41] Building C object CMakeFiles/kiibohd.dir/main.c.obj
[8/41] Building C object CMakeFiles/kiibohd.dir/Lib/arm_cortex.c.obj
[9/41] Building C object CMakeFiles/kiibohd.dir/Lib/kinetis.c.obj
[10/41] Building C object CMakeFiles/kiibohd.dir/Lib/utf8.c.obj
[11/41] Building C object CMakeFiles/kiibohd.dir/Lib/time.c.obj
[12/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/ISSILed/i2c.c.obj
[13/41] Building C object CMakeFiles/kiibohd.dir/Scan/Infinity_Ergodox/scan_loop.c.obj
[14/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/kll.c.obj
[15/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/MatrixARMPeriodic/matrix_scan.c.obj
[16/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/ISSILed/led_scan.c.obj
[17/41] Building C object CMakeFiles/kiibohd.dir/generatedPixelmap.c.obj
[18/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/STLcd/lcd_scan.c.obj
[19/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/layer.c.obj
[20/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/result.c.obj
[21/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/output_com.c.obj
[22/41] Building C object CMakeFiles/kiibohd.dir/Output/Interface/output_gen.c.obj
[23/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_desc.c.obj
[24/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/UARTConnect/connect_scan.c.obj
[25/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/trigger.c.obj
[26/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/macro.c.obj
[27/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_mem.c.obj
[28/41] Building C object CMakeFiles/kiibohd.dir/Output/HID-IO/hidio_com.c.obj
[29/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/output_usb.c.obj
[30/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_mouse.c.obj
[31/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_rawio.c.obj
[32/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_keyboard.c.obj
[33/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_dev.c.obj
[34/41] Building C object CMakeFiles/kiibohd.dir/Debug/led/led.c.obj
[35/41] Building C object CMakeFiles/kiibohd.dir/Debug/latency/latency.c.obj
[36/41] Building C object CMakeFiles/kiibohd.dir/Debug/print/print.c.obj
[37/41] Building C object CMakeFiles/kiibohd.dir/Macro/PixelMap/pixel.c.obj
[38/41] Building C object CMakeFiles/kiibohd.dir/Debug/cli/cli.c.obj
[39/41] Linking C executable kiibohd.elf
Setting new key
Key Prepended: 0000000000000000
[40/41] Message for DFU targets
 --> NOTE: kiibohd.secure.dfu.bin is required for secure Kiibohd Bootloaders.
     Only keyboards from late 2017 and onwards, support this.
     See lsusb -d 1c11: -v and look for iInterface 4 Kiibohd DFU Secure.
     Otherwise, use the kiibohd.dfu.bin file when it says iInterface 4 Kiibohd DFU.
     Use the physical reset button on the back of the keyboard to temporarily disable secure mode.
 --> NOTE2: Secure mode is disabled currently, but will be enabled when key negotiation is supported.
[41/41] Chip usage for mk20dx256vlh7
	 SRAM: 	43% 	28412/65536	bytes
	Flash: 	35% 	90656/253952	bytes
Firmware has been compiled into: '/tmp/tmp.XWpCCgm3MD/left'
/controller/Keyboards
linux-gnu/Linux is supported.
Unix Build
Selected Generator: Ninja
/tmp/tmp.XWpCCgm3MD/right
VID: 0x308F (Boot: 0x1C11)
PID: 0x0025 (Boot: 0xB007)
-- Build CPU Detected:
x86_64
-- Build Kernel Detected:
Linux 5.4.10-x86_64-linode132
-- Compiler Family:
arm
-- Compiler Selected:
gcc
-- Chip Selected:
mk20dx256vlh7
-- Chip Family:
mk2x
-- CPU Selected:
cortex-m4
-- Compiler Source Files:
Lib/kinetis.c;Lib/delay.c;Lib/entropy.c;Lib/gpio.c;Lib/periodic.c;Lib/storage.c;Lib/time.c;Lib/utf8.c;Lib/arm_cortex.c
-- Bootloader Type:
dfu
-- The C compiler identification is GNU 7.3.1
-- Check for working C compiler: /usr/bin/arm-none-eabi-gcc
-- Check for working C compiler: /usr/bin/arm-none-eabi-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Full Compiler:
/usr/bin/arm-none-eabi-gcc 7.3.1
-- Detected Scan Module Source Files:
Scan/Devices/ISSILed/i2c.c;Scan/Devices/ISSILed/led_scan.c;Scan/Devices/MatrixARMPeriodic/matrix_scan.c;Scan/Devices/STLcd/lcd_scan.c;Scan/Devices/UARTConnect/connect_scan.c;Scan/Infinity_Ergodox/scan_loop.c
-- Detected Macro Module Source Files:
Macro/PartialMap/kll.c;Macro/PartialMap/layer.c;Macro/PartialMap/macro.c;Macro/PartialMap/result.c;Macro/PartialMap/trigger.c;Macro/PixelMap/pixel.c;/tmp/tmp.XWpCCgm3MD/right/generatedPixelmap.c
-- Detected Output Module Source Files:
Output/HID-IO/hidio_com.c;Output/Interface/output_gen.c;Output/USB/output_com.c;Output/USB/output_usb.c;Output/USB/arm/usb_desc.c;Output/USB/arm/usb_dev.c;Output/USB/arm/usb_keyboard.c;Output/USB/arm/usb_mem.c;Output/USB/arm/usb_mouse.c;Output/USB/arm/usb_rawio.c
-- Detected Debug Module Source Files:
Debug/cli/cli.c;Debug/latency/latency.c;Debug/led/led.c;Debug/print/print.c
-- Found Git: /usr/bin/git (found version "2.20.1") 
-- Found LSB_RELEASE: /usr/bin/lsb_release  
-- Build OS Detected:
Ubuntu 19.10 eoan
-- Found Ctags: /usr/bin/ctags-exuberant (found version "5.9~svn20110310") 
-- Found PythonInterp: python3 (found suitable version "3.7.5", minimum required is "3") 
-- Checking for kll
-- GITHUB_APIKEY was set.
-- kll Version Detected: kll 0.5.7.16
-- kll Installation Path: /root/.local/share/virtualenvs/Keyboards-41-guJFC/lib/python3.7/site-packages/kll
-- kll Layouts Cache Path: /tmp/10-hid-io-layouts-76840e4
-- Detected Layout Files:
/controller/Scan/Devices/ISSILed/capabilities.kll
/controller/Scan/Devices/MatrixARMPeriodic/capabilities.kll
/controller/Scan/Devices/STLcd/capabilities.kll
/controller/Scan/Devices/UARTConnect/capabilities.kll
/controller/Macro/PartialMap/capabilities.kll
/controller/Macro/PixelMap/capabilities.kll
/controller/Output/HID-IO/capabilities.kll
/controller/Output/USB/capabilities.kll
/controller/Debug/latency/capabilities.kll
/controller/Debug/led/capabilities.kll
/controller/Lib/arm_cortex.kll
/controller/Lib/kinetis.kll
/controller/Scan/Infinity_Ergodox/scancode_map.kll
/controller/Scan/Infinity_Ergodox/rightHand.kll
/controller/Scan/Infinity_Ergodox/slave1.kll
/controller/Scan/Infinity_Ergodox/leftHand.kll
/root/.local/share/virtualenvs/Keyboards-41-guJFC/lib/python3.7/site-packages/kll/layouts/infinity_ergodox/lcdFuncMap.kll
/tmp/tmp.XWpCCgm3MD/right/MDErgo1-Default-0.kll
/tmp/tmp.XWpCCgm3MD/right/MDErgo1-Default-1.kll
/tmp/tmp.XWpCCgm3MD/right/MDErgo1-Default-2.kll
-- Found DFU_SUFFIX: /usr/bin/dfu-suffix (found version "0.9") 
-- Found OBJDUMP: /usr/bin/arm-none-eabi-objdump  
-- Configuring done
-- Generating done
CMake Warning (dev):
  Policy CMP0058 is not set: Ninja requires custom command byproducts to be
  explicit.  Run "cmake --help-policy CMP0058" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  This project specifies custom command DEPENDS on files in the build tree
  that are not specified as the OUTPUT or BYPRODUCTS of any
  add_custom_command or add_custom_target:

   MDErgo1-Default-0.kll
   MDErgo1-Default-1.kll
   MDErgo1-Default-2.kll

  For compatibility with versions of CMake that did not have the BYPRODUCTS
  option, CMake is generating phony rules for such files to convince 'ninja'
  to build.

  Project authors should add the missing BYPRODUCTS or OUTPUT options to the
  custom commands that produce these files.
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Build files have been written to: /tmp/tmp.XWpCCgm3MD/right
[1/41] Generating KLL Layout
ERROR: /tmp/tmp.XWpCCgm3MD/right/MDErgo1-Default-0.kll
      Contains possibly incompatible KLL expressions from 0.3.c
      Please your configuration to KLL 0.5.7.11 compliant code
 === 0.5.6.0 === 
KLL now supports fade profile groups.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Each fade profile may be given 4 fade periods:
 0: Off to On
 1: On
 2: On to Off
 3: Off
There are 16 configurable periods in which start and end times may be set from 0 to 15.
Setting start and end to 0, disables that period (no time is spent waiting/interpolating).
Setting 1 waits for 1 frame, 2 -> 2 frames, 3 -> 4 frames, 4 -> 8 frames
The equations are:
 .start == (1 << start) - 1
 .end   == (1 << end)
Setting .start to a non-zero value will begin the interpolation starting at that frame brightness.

Fade profiles can be set dynamically using fade_set() capability.
 U"A" : fade_set(0, 2, 13); # On profile 0 (keys), set On to Off period to configuration 13
The active layer fade can be started using the fade_layer_highlight() capability.
 Layer[1] : fade_layer_highlight(1);

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/2d7152e0576281abd2f4b1d094a5d778d9811aff/Macro/PixelMap/capabilities.kll

 === 0.5.7.0 === 
KLL now supports the single animation option.
For example:
A[my_animation] <= pfunc:interp, single;
U"Q" : A[my_other_animation](single, pos:20); # Start animation at frame 20 and pause

The single option starts an animation at the specified frame and pauses immediately after.
This is useful when creating a list of colors to cycle through using a rotation.


KLL now supports a basic gamma correction table.
Gamma correction can be dynamically enabled using the gamma() function.
U"A" : gamma(2); # Toggles gamma correction
The gamma correction table is generated at compile time and can be configured using:
LEDGamma = 2.2; # Default gamma correction

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/bce0073e5c31ce89ecc4122d5c1438a027809393/Macro/PixelMap/capabilities.kll

 === 0.5.7.6 === 
KLL now supports the replace:clearactive animation option.
For example:
A[my_animation] <= pfunc:interp, replace:clearactive, single;
U"Q" : A[my_other_animation](replace:clearactive);

The main use for clearactive is to clear any non-paused animations from the animation stack.
While leaving any animations that are currently paused still on the stack.
This means it's possible to save those animations to non-volatile memory (if your keyboard supports it).
If you use replace:clear (as was the default before), when you save the current settings on your keyboard
the keyboard won't understand the sequence of events in order to display the current LED colors.

 === 0.5.7.8 === 
KLL now supports fade profile brightness settings.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Fade profiles are used to apply a configurable dimming and brightening, on top of whatever animation may be set.
0.5.7.8 adds support for the fade_control() which (among other things), can adjust brightness per-fade profile.
The most useful application of this would be to dim the LEDs under keys, while leaving underglow and indicator LEDs on.

U"B" : fade_control(0, 3, 20); # Increment brightness on fade profile 0 (keys) by 20
U"C" : fade_control(1, 4, 10); # Decrement brightness on fade profile 1 (underglow) by 10
KLL_LED_FadeBrightness[2] = 150; # Set default brightness of indicators to 150

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/ae7bf0b711dfba5e77451cd2f269032f929a8657/Macro/PixelMap/capabilities.kll#L89

 === 0.5.7.11 === 
KLL now supports inverting the Layer Fade profile.
This means when a layer is active, only the keys in that layer will show the active animation.
It is used by default on Gemini Dusk and Dawn.

To use, add the following to your KLL file:
KLL_LED_FadeActiveLayerInvert = 1;
KLL_LED_FadeBrightness[0] = 255;
KLL_LED_FadeBrightness[1] = 255;
KLL_LED_FadeBrightness[2] = 255;
KLL_LED_FadeBrightness[3] = 0; # Sets unused LEDs to off
Layer[1] : fade_layer_highlight(1); # Activates layer fade when layer is triggered
Layer[2] : fade_layer_highlight(2); # Activates layer fade when layer is triggered

ERROR: /tmp/tmp.XWpCCgm3MD/right/MDErgo1-Default-1.kll
      Contains possibly incompatible KLL expressions from 0.3.c
      Please your configuration to KLL 0.5.7.11 compliant code
 === 0.5.6.0 === 
KLL now supports fade profile groups.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Each fade profile may be given 4 fade periods:
 0: Off to On
 1: On
 2: On to Off
 3: Off
There are 16 configurable periods in which start and end times may be set from 0 to 15.
Setting start and end to 0, disables that period (no time is spent waiting/interpolating).
Setting 1 waits for 1 frame, 2 -> 2 frames, 3 -> 4 frames, 4 -> 8 frames
The equations are:
 .start == (1 << start) - 1
 .end   == (1 << end)
Setting .start to a non-zero value will begin the interpolation starting at that frame brightness.

Fade profiles can be set dynamically using fade_set() capability.
 U"A" : fade_set(0, 2, 13); # On profile 0 (keys), set On to Off period to configuration 13
The active layer fade can be started using the fade_layer_highlight() capability.
 Layer[1] : fade_layer_highlight(1);

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/2d7152e0576281abd2f4b1d094a5d778d9811aff/Macro/PixelMap/capabilities.kll

 === 0.5.7.0 === 
KLL now supports the single animation option.
For example:
A[my_animation] <= pfunc:interp, single;
U"Q" : A[my_other_animation](single, pos:20); # Start animation at frame 20 and pause

The single option starts an animation at the specified frame and pauses immediately after.
This is useful when creating a list of colors to cycle through using a rotation.


KLL now supports a basic gamma correction table.
Gamma correction can be dynamically enabled using the gamma() function.
U"A" : gamma(2); # Toggles gamma correction
The gamma correction table is generated at compile time and can be configured using:
LEDGamma = 2.2; # Default gamma correction

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/bce0073e5c31ce89ecc4122d5c1438a027809393/Macro/PixelMap/capabilities.kll

 === 0.5.7.6 === 
KLL now supports the replace:clearactive animation option.
For example:
A[my_animation] <= pfunc:interp, replace:clearactive, single;
U"Q" : A[my_other_animation](replace:clearactive);

The main use for clearactive is to clear any non-paused animations from the animation stack.
While leaving any animations that are currently paused still on the stack.
This means it's possible to save those animations to non-volatile memory (if your keyboard supports it).
If you use replace:clear (as was the default before), when you save the current settings on your keyboard
the keyboard won't understand the sequence of events in order to display the current LED colors.

 === 0.5.7.8 === 
KLL now supports fade profile brightness settings.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Fade profiles are used to apply a configurable dimming and brightening, on top of whatever animation may be set.
0.5.7.8 adds support for the fade_control() which (among other things), can adjust brightness per-fade profile.
The most useful application of this would be to dim the LEDs under keys, while leaving underglow and indicator LEDs on.

U"B" : fade_control(0, 3, 20); # Increment brightness on fade profile 0 (keys) by 20
U"C" : fade_control(1, 4, 10); # Decrement brightness on fade profile 1 (underglow) by 10
KLL_LED_FadeBrightness[2] = 150; # Set default brightness of indicators to 150

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/ae7bf0b711dfba5e77451cd2f269032f929a8657/Macro/PixelMap/capabilities.kll#L89

 === 0.5.7.11 === 
KLL now supports inverting the Layer Fade profile.
This means when a layer is active, only the keys in that layer will show the active animation.
It is used by default on Gemini Dusk and Dawn.

To use, add the following to your KLL file:
KLL_LED_FadeActiveLayerInvert = 1;
KLL_LED_FadeBrightness[0] = 255;
KLL_LED_FadeBrightness[1] = 255;
KLL_LED_FadeBrightness[2] = 255;
KLL_LED_FadeBrightness[3] = 0; # Sets unused LEDs to off
Layer[1] : fade_layer_highlight(1); # Activates layer fade when layer is triggered
Layer[2] : fade_layer_highlight(2); # Activates layer fade when layer is triggered

ERROR: /tmp/tmp.XWpCCgm3MD/right/MDErgo1-Default-2.kll
      Contains possibly incompatible KLL expressions from 0.3.c
      Please your configuration to KLL 0.5.7.11 compliant code
 === 0.5.6.0 === 
KLL now supports fade profile groups.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Each fade profile may be given 4 fade periods:
 0: Off to On
 1: On
 2: On to Off
 3: Off
There are 16 configurable periods in which start and end times may be set from 0 to 15.
Setting start and end to 0, disables that period (no time is spent waiting/interpolating).
Setting 1 waits for 1 frame, 2 -> 2 frames, 3 -> 4 frames, 4 -> 8 frames
The equations are:
 .start == (1 << start) - 1
 .end   == (1 << end)
Setting .start to a non-zero value will begin the interpolation starting at that frame brightness.

Fade profiles can be set dynamically using fade_set() capability.
 U"A" : fade_set(0, 2, 13); # On profile 0 (keys), set On to Off period to configuration 13
The active layer fade can be started using the fade_layer_highlight() capability.
 Layer[1] : fade_layer_highlight(1);

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/2d7152e0576281abd2f4b1d094a5d778d9811aff/Macro/PixelMap/capabilities.kll

 === 0.5.7.0 === 
KLL now supports the single animation option.
For example:
A[my_animation] <= pfunc:interp, single;
U"Q" : A[my_other_animation](single, pos:20); # Start animation at frame 20 and pause

The single option starts an animation at the specified frame and pauses immediately after.
This is useful when creating a list of colors to cycle through using a rotation.


KLL now supports a basic gamma correction table.
Gamma correction can be dynamically enabled using the gamma() function.
U"A" : gamma(2); # Toggles gamma correction
The gamma correction table is generated at compile time and can be configured using:
LEDGamma = 2.2; # Default gamma correction

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/bce0073e5c31ce89ecc4122d5c1438a027809393/Macro/PixelMap/capabilities.kll

 === 0.5.7.6 === 
KLL now supports the replace:clearactive animation option.
For example:
A[my_animation] <= pfunc:interp, replace:clearactive, single;
U"Q" : A[my_other_animation](replace:clearactive);

The main use for clearactive is to clear any non-paused animations from the animation stack.
While leaving any animations that are currently paused still on the stack.
This means it's possible to save those animations to non-volatile memory (if your keyboard supports it).
If you use replace:clear (as was the default before), when you save the current settings on your keyboard
the keyboard won't understand the sequence of events in order to display the current LED colors.

 === 0.5.7.8 === 
KLL now supports fade profile brightness settings.
A fade profile is a selection of LEDs associated to one of 4 groups:
 - Keys
 - Underglow
 - Indicators
 - Active Layer
Fade profiles are used to apply a configurable dimming and brightening, on top of whatever animation may be set.
0.5.7.8 adds support for the fade_control() which (among other things), can adjust brightness per-fade profile.
The most useful application of this would be to dim the LEDs under keys, while leaving underglow and indicator LEDs on.

U"B" : fade_control(0, 3, 20); # Increment brightness on fade profile 0 (keys) by 20
U"C" : fade_control(1, 4, 10); # Decrement brightness on fade profile 1 (underglow) by 10
KLL_LED_FadeBrightness[2] = 150; # Set default brightness of indicators to 150

For more details, review the KLL definition file:
https://github.com/kiibohd/controller/blob/ae7bf0b711dfba5e77451cd2f269032f929a8657/Macro/PixelMap/capabilities.kll#L89

 === 0.5.7.11 === 
KLL now supports inverting the Layer Fade profile.
This means when a layer is active, only the keys in that layer will show the active animation.
It is used by default on Gemini Dusk and Dawn.

To use, add the following to your KLL file:
KLL_LED_FadeActiveLayerInvert = 1;
KLL_LED_FadeBrightness[0] = 255;
KLL_LED_FadeBrightness[1] = 255;
KLL_LED_FadeBrightness[2] = 255;
KLL_LED_FadeBrightness[3] = 0; # Sets unused LEDs to off
Layer[1] : fade_layer_highlight(1); # Activates layer fade when layer is triggered
Layer[2] : fade_layer_highlight(2); # Activates layer fade when layer is triggered

-- Generating --
/tmp/tmp.XWpCCgm3MD/right/kll_defs.h
/tmp/tmp.XWpCCgm3MD/right/generatedKeymap.h
/tmp/tmp.XWpCCgm3MD/right/usb_hid.h
/tmp/tmp.XWpCCgm3MD/right/generatedPixelmap.c
/tmp/tmp.XWpCCgm3MD/right/kll.json
[2/41] Building C object CMakeFiles/kiibohd.dir/Lib/storage.c.obj
[3/41] Building C object CMakeFiles/kiibohd.dir/main.c.obj
[4/41] Building C object CMakeFiles/kiibohd.dir/Lib/periodic.c.obj
[5/41] Building C object CMakeFiles/kiibohd.dir/Lib/delay.c.obj
[6/41] Building C object CMakeFiles/kiibohd.dir/Lib/entropy.c.obj
[7/41] Building C object CMakeFiles/kiibohd.dir/Lib/gpio.c.obj
[8/41] Building C object CMakeFiles/kiibohd.dir/Lib/utf8.c.obj
[9/41] Building C object CMakeFiles/kiibohd.dir/Lib/kinetis.c.obj
[10/41] Building C object CMakeFiles/kiibohd.dir/Lib/arm_cortex.c.obj
[11/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/ISSILed/i2c.c.obj
[12/41] Building C object CMakeFiles/kiibohd.dir/Lib/time.c.obj
[13/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/kll.c.obj
[14/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/MatrixARMPeriodic/matrix_scan.c.obj
[15/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/ISSILed/led_scan.c.obj
[16/41] Building C object CMakeFiles/kiibohd.dir/Scan/Infinity_Ergodox/scan_loop.c.obj
[17/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/STLcd/lcd_scan.c.obj
[18/41] Building C object CMakeFiles/kiibohd.dir/generatedPixelmap.c.obj
[19/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/layer.c.obj
[20/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/result.c.obj
[21/41] Building C object CMakeFiles/kiibohd.dir/Scan/Devices/UARTConnect/connect_scan.c.obj
[22/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/trigger.c.obj
[23/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/output_com.c.obj
[24/41] Building C object CMakeFiles/kiibohd.dir/Output/Interface/output_gen.c.obj
[25/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_desc.c.obj
[26/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_mem.c.obj
[27/41] Building C object CMakeFiles/kiibohd.dir/Macro/PartialMap/macro.c.obj
[28/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_mouse.c.obj
[29/41] Building C object CMakeFiles/kiibohd.dir/Output/HID-IO/hidio_com.c.obj
[30/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_keyboard.c.obj
[31/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/output_usb.c.obj
[32/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_rawio.c.obj
[33/41] Building C object CMakeFiles/kiibohd.dir/Debug/led/led.c.obj
[34/41] Building C object CMakeFiles/kiibohd.dir/Output/USB/arm/usb_dev.c.obj
[35/41] Building C object CMakeFiles/kiibohd.dir/Debug/latency/latency.c.obj
[36/41] Building C object CMakeFiles/kiibohd.dir/Debug/print/print.c.obj
[37/41] Building C object CMakeFiles/kiibohd.dir/Debug/cli/cli.c.obj
[38/41] Building C object CMakeFiles/kiibohd.dir/Macro/PixelMap/pixel.c.obj
[39/41] Linking C executable kiibohd.elf
Setting new key
Key Prepended: 0000000000000000
[40/41] Message for DFU targets
 --> NOTE: kiibohd.secure.dfu.bin is required for secure Kiibohd Bootloaders.
     Only keyboards from late 2017 and onwards, support this.
     See lsusb -d 1c11: -v and look for iInterface 4 Kiibohd DFU Secure.
     Otherwise, use the kiibohd.dfu.bin file when it says iInterface 4 Kiibohd DFU.
     Use the physical reset button on the back of the keyboard to temporarily disable secure mode.
 --> NOTE2: Secure mode is disabled currently, but will be enabled when key negotiation is supported.
[41/41] Chip usage for mk20dx256vlh7
	 SRAM: 	43% 	28288/65536	bytes
	Flash: 	35% 	90412/253952	bytes
Firmware has been compiled into: '/tmp/tmp.XWpCCgm3MD/right'
/controller/Keyboards
